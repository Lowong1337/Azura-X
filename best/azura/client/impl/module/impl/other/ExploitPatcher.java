package best.azura.client.impl.module.impl.other;

import best.azura.client.api.module.Category;
import best.azura.client.api.module.Module;
import best.azura.client.api.module.ModuleInfo;
import best.azura.client.api.ui.notification.Notification;
import best.azura.client.api.ui.notification.Type;
import best.azura.client.impl.Client;
import best.azura.client.impl.events.EventReceivedPacket;
import best.azura.client.impl.value.BooleanValue;
import best.azura.eventbus.handler.EventHandler;
import best.azura.eventbus.handler.Listener;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S48PacketResourcePackSend;

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

@SuppressWarnings("unused")
@ModuleInfo(name = "Patcher", description = "Patch mc exploits such as crashing the client by server-side packets.", category = Category.OTHER)
public class ExploitPatcher extends Module {

    private final BooleanValue soundCrash = new BooleanValue("Sound Crash", "Fix the sound crash exploit", true);
    private final BooleanValue resourceExploit = new BooleanValue("Resource Packs Exploit", "Fix the resource packs exploit where you can search a client's pc", true);

    @EventHandler
    private final Listener<EventReceivedPacket> soundCrashListener = e -> {
        if (!soundCrash.getObject()) return;
        if (!(e.getPacket() instanceof S19PacketEntityStatus)) return;
        final S19PacketEntityStatus s19 = e.getPacket();
        if (s19.getOpCode() == 21) e.setCancelled(true);
    };

    @EventHandler
    private final Listener<EventReceivedPacket> resourcePacksExploitListener = e -> {
        if (!resourceExploit.getObject()) return;
        if (!(e.getPacket() instanceof S48PacketResourcePackSend)) return;
        final S48PacketResourcePackSend s48 = e.getPacket();
        String url = s48.getURL(), hash = s48.getHash();
        try {
            URI uri = new URI(url);
            String scheme = uri.getScheme();
            boolean isLevelProtocol = "level".equals(scheme);
            if (!"http".equals(scheme) && !"https".equals(scheme) && !isLevelProtocol) {
                mc.thePlayer.sendQueue.addToSendQueue(new C19PacketResourcePackStatus(hash, C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                e.setCancelled(true);
            }
            url = URLDecoder.decode(url.substring("level://".length()), StandardCharsets.UTF_8.toString());
            if (isLevelProtocol && (url.contains("..") || !url.endsWith("/resources.zip"))) {
                Client.INSTANCE.getNotificationManager().addToQueue(new Notification("Warning", "The current server has attempted to access your files using the resource packs exploit.", 3000, Type.WARNING));
                Client.INSTANCE.getNotificationManager().addToQueue(new Notification("Warning", url, 3000, Type.WARNING));
                e.setCancelled(true);
            }
        } catch (URISyntaxException | UnsupportedEncodingException ex) {
            e.setCancelled(true);
        }
    };

}